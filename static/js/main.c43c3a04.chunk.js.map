{"version":3,"sources":["redux/actionTypes.js","redux/actions.js","redux/reducers.js","redux/store.js","components/HeaderBar/index.jsx","components/QrReader/index.jsx","containers/QrReader.js","components/QrContentModal/index.jsx","containers/QrContentModal.js","App.js","serviceWorker.js","index.js"],"names":["types","setQrContent","createAction","qrContent","resetQrContent","qrReducer","handleActions","state","action","content","payload","rootReducer","combineReducers","createStore","HeaderBar","props","AppBar","position","Toolbar","Typography","MyQrReader","handleSetQrContent","delay","onError","err","console","error","onScan","data","log","style","width","QrReaderContainer","_props","useSelector","dispatch","useDispatch","React","useCallback","useDispatchProps","QrReader","useStyles","makeStyles","theme","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","QrContentModal","classes","isOpen","contentTitle","contentPath","handleResetQrContent","Modal","aria-labelledby","aria-describedby","className","open","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Card","CardContent","variant","component","CardMedia","height","image","useStateProps","num","qrImageMap","i","String","qrImageMapCreater","undefined","title","path","QrContentModalContainer","App","store","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c43c3a04.chunk.js","sourcesContent":["export const types = {\n  SET_QR_CONTENT: 'SET_QR_CONTENT',\n  RESET_QR_CONTENT: 'RESET_QR_CONTENT'\n}\n","import { createAction } from 'redux-actions'\nimport { types } from './actionTypes.js'\n\n// qrReducer\nexport const setQrContent = createAction(types.SET_QR_CONTENT, (qrContent) => ({ qrContent: qrContent }))\nexport const resetQrContent = createAction(types.RESET_QR_CONTENT)\n","import { handleActions } from 'redux-actions'\nimport { setQrContent, resetQrContent} from './actions'\n\nconst initialState = {\n  content: '',\n}\n\n// Qr management reducer\nexport const qrReducer = handleActions({\n  [setQrContent]: (state, action) => ({\n    ...state,\n    content: action.payload.qrContent\n  }),\n  [resetQrContent]: (state, action) => ({\n    ...state,\n    content: ''\n  })\n}, initialState)\n","import { combineReducers, createStore } from 'redux'\nimport { qrReducer } from './reducers.js'\n\nconst rootReducer = combineReducers({\n  qrReducer\n})\n\nexport default createStore(rootReducer)\n","import React from 'react'\nimport CssBaseLine from '@material-ui/core/CssBaseLine'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n\nconst HeaderBar = (props) => {\n  return (\n    <>\n      <CssBaseLine/>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography>\n            高専祭2020 4I / QRを探せ!\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </>\n  )\n}\n\nexport default HeaderBar\n","import React from 'react'\nimport QrReader from 'react-qr-reader'\n\nconst MyQrReader = (props) => {\n  const qrContent = props.qrContent\n  const handleSetQrContent = props.handleSetQrContent\n\n  const handleScan = (data) => {\n    if (data) {\n      handleSetQrContent(data)\n      console.log(data)\n      console.log(qrContent)\n    }\n  }\n  \n  const handleError = (err) => {\n    console.error(err)\n  }\n\n  return (\n    <div>\n      <QrReader\n        delay={300}\n        onError={handleError}\n        onScan={handleScan}\n        style={{ width: '100%' }}\n      />\n    </div>\n  )\n}\n\nexport default MyQrReader;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setQrContent } from '../redux/actions.js'\nimport QrReader from '../components/QrReader'\n\n// Stateを整形してPropsに挿入\nconst useStateProps = () => {\n  const qrReducer= useSelector((state) => state.qrReducer)\n\n  return {\n    qrContent: qrReducer.content\n  }\n}\n\n// Actionを整形してPropsに挿入\nconst useDispatchProps = () => {\n  const dispatch = useDispatch()\n\n  const handleSetQrContent = React.useCallback((content) =>\n    {\n      dispatch(setQrContent(content))\n    },\n    [dispatch]\n  )\n\n  return {\n    handleSetQrContent\n  }\n}\n\nconst QrReaderContainer = (props) => {\n  const _props = { ...useStateProps(), ...useDispatchProps(), ...props }\n  return <QrReader {..._props}/>\n}\n\nexport default QrReaderContainer\n","import React from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport Modal from '@material-ui/core/Modal'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport Fade from '@material-ui/core/Fade'\nimport Card from '@material-ui/core/Card'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\n\nconst QrContentModal = (props) => {\n  const classes = useStyles()\n  \n  const isOpen = props.isOpen\n  const contentTitle = props.contentTitle\n  const contentPath = props.contentPath\n\n  const handleResetQrContent = props.handleResetQrContent\n\n  return (\n    <div>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={isOpen}\n        onClose={handleResetQrContent}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={isOpen}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h5\" component=\"h2\">\n                { contentTitle }\n              </Typography>\n              <CardMedia style={{ height: \"80vw\", width: \"80vw\" }} image={contentPath}/>\n            </CardContent>\n          </Card>\n        </Fade>\n      </Modal>\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}))\n\nexport default QrContentModal\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { resetQrContent } from '../redux/actions.js'\nimport QrContentModal from '../components/QrContentModal'\n\nconst qrImageMapCreater = (num) => {\n  let qrImageMap = {}\n  for (let i = 1; i <= num; i++) {\n    qrImageMap['https://' + String(i) + '.com'] = {\n      'title': 'ヒント' + String(i),\n      'path': '/assets/' + String(i) + '.png'\n    }\n  }\n  return qrImageMap\n}\n\nconst useStateProps = () => {\n  const qrReducer = useSelector((state) => state.qrReducer)\n  \n  const qrImageMap = qrImageMapCreater(4)\n  const content = qrImageMap[qrReducer.content]\n\n  return {\n    isOpen: content !== undefined,\n    contentTitle: content?.title,\n    contentPath: content?.path\n  }\n}\n\nconst useDispatchProps = () => {\n  const dispatch = useDispatch()\n\n  const handleResetQrContent = React.useCallback((content) =>\n    {\n      dispatch(resetQrContent())\n    },\n    [dispatch]\n  )\n\n  return {\n    handleResetQrContent\n  }\n}\n\nconst QrContentModalContainer = (props) => {\n  const _props = { ...useStateProps(), ...useDispatchProps(), ...props }\n\n  return <QrContentModal {..._props}/>\n}\n\nexport default QrContentModalContainer\n","import React from 'react';\nimport './App.css';\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store.js'\n\nimport HeaderBar from './components/HeaderBar'\nimport QrReader from './containers/QrReader.js'\nimport QrContentModal from './containers/QrContentModal.js'\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <HeaderBar/>\n        <QrReader/>\n        <QrContentModal/>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}